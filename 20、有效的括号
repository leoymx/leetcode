//给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。
//
// 有效字符串需满足：
//
//
// 左括号必须用相同类型的右括号闭合。
// 左括号必须以正确的顺序闭合。
//
//
// 注意空字符串可被认为是有效字符串。
//
// 示例 1:
//
// 输入: "()"
//输出: true
//
//
// 示例 2:
//
// 输入: "()[]{}"
//输出: true
//
//
// 示例 3:
//
// 输入: "(]"
//输出: false
//
//
// 示例 4:
//
// 输入: "([)]"
//输出: false
//
//
// 示例 5:
//
// 输入: "{[]}"
//输出: true
// Related Topics 栈 字符串
/**
 * 利用stack将数据存储，然后进行匹配pop
 */

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Stack;

//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public boolean isValid(String s) {
        Stack<Character> indexStack=new Stack<>();
        for(int m=0;m<s.length();m++){
            if(s.charAt(m)=='('){
                indexStack.push('(');
            }

            if(s.charAt(m)=='[') {
                indexStack.push('[');
            }
            if(s.charAt(m)=='{') {
                indexStack.push('{');
            }
            if(s.charAt(m)==')'){
                if(!indexStack.isEmpty()&&indexStack.peek()=='(') {
                    indexStack.pop();
                }
                else
                    return false;
            }
            if(s.charAt(m)==']'){
                if(!indexStack.isEmpty()&&indexStack.peek()=='[') {
                    indexStack.pop();
                }else
                    return false;
            }
            if(s.charAt(m)=='}'){
                if(!indexStack.isEmpty()&&indexStack.peek()=='{') {
                    indexStack.pop();
                }else
                    return false;
            }
        }
        if(indexStack.isEmpty())
            return  true;
        else
            return false;
    }

}
//leetcode submit region end(Prohibit modification and deletion)
