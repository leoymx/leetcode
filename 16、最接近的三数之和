  //给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和
//。假定每组输入只存在唯一答案。
//
// 例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.
//
//与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).
//
// Related Topics 数组 双指针


import java.util.Arrays;

//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int limit=nums[0]+nums[1]+nums[2];
        for(int i=0;i<nums.length-2;i++){
            int j=i+1;
            int k=nums.length-1;
            while(j<k) {
                if (nums[i] + nums[j] + nums[k] == target)
                    return target;
                else if(nums[i] + nums[j] + nums[k] > target){
                    if(Math.abs(nums[i] + nums[j] + nums[k]-target)<Math.abs(limit-target)){
                        limit=nums[i] + nums[j] + nums[k];
                    }else{
                        k--;
                    }
                }else if(nums[i] + nums[j] + nums[k] < target){
                    if(Math.abs(nums[i] + nums[j] + nums[k]-target)<Math.abs(limit-target)){
                        limit=nums[i] + nums[j] + nums[k];
                    }else{
                        j++;
                    }
                }
            }
        }
        return limit;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
